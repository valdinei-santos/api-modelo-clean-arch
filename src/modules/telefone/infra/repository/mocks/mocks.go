// Code generated by MockGen. DO NOT EDIT.
// Source: src/modules/telefone/infra/repository/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=src/modules/telefone/infra/repository/interfaces.go -destination=src/modules/telefone/infra/repository/mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entities "github.com/valdinei-santos/api-modelo-clean-arch/src/modules/telefone/domain/entities"
	dto "github.com/valdinei-santos/api-modelo-clean-arch/src/modules/telefone/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockIRepository) FindAll(cpf string) ([]entities.Telefone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", cpf)
	ret0, _ := ret[0].([]entities.Telefone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIRepositoryMockRecorder) FindAll(cpf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIRepository)(nil).FindAll), cpf)
}

// Save mocks base method.
func (m *MockIRepository) Save(t *dto.Telefone) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIRepositoryMockRecorder) Save(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIRepository)(nil).Save), t)
}

// SaveAll mocks base method.
func (m *MockIRepository) SaveAll(t []*dto.Telefone) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAll", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAll indicates an expected call of SaveAll.
func (mr *MockIRepositoryMockRecorder) SaveAll(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAll", reflect.TypeOf((*MockIRepository)(nil).SaveAll), t)
}
