// Code generated by MockGen. DO NOT EDIT.
// Source: src/modules/produto/infra/repository/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=src/modules/produto/infra/repository/interfaces.go -destination=src/modules/cliente/produto/repository/mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"

	entities "github.com/valdinei-santos/api-modelo-clean-arch/src/modules/produto/domain/entities"
	dto "github.com/valdinei-santos/api-modelo-clean-arch/src/modules/produto/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockIRepository) BeginTransaction(stamp string) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction", stamp)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockIRepositoryMockRecorder) BeginTransaction(stamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockIRepository)(nil).BeginTransaction), stamp)
}

// FindAll mocks base method.
func (m *MockIRepository) FindAll(stamp string) (*[]entities.Produto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", stamp)
	ret0, _ := ret[0].(*[]entities.Produto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIRepositoryMockRecorder) FindAll(stamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIRepository)(nil).FindAll), stamp)
}

// FindById mocks base method.
func (m *MockIRepository) FindById(stamp, cpf string) (*entities.Produto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", stamp, cpf)
	ret0, _ := ret[0].(*entities.Produto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockIRepositoryMockRecorder) FindById(stamp, cpf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockIRepository)(nil).FindById), stamp, cpf)
}

// Save mocks base method.
func (m *MockIRepository) Save(stamp string, p *dto.ProdutoDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", stamp, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIRepositoryMockRecorder) Save(stamp, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIRepository)(nil).Save), stamp, p)
}
