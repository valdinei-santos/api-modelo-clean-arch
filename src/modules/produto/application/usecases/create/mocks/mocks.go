// Code generated by MockGen. DO NOT EDIT.
// Source: src/modules/produto/application/usecases/create/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=src/modules/produto/application/usecases/create/interfaces.go -destination=src/modules/produto/application/usecases/create/mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "github.com/valdinei-santos/api-modelo-clean-arch/src/modules/produto/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockIUsecase is a mock of IUsecase interface.
type MockIUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseMockRecorder
}

// MockIUsecaseMockRecorder is the mock recorder for MockIUsecase.
type MockIUsecaseMockRecorder struct {
	mock *MockIUsecase
}

// NewMockIUsecase creates a new mock instance.
func NewMockIUsecase(ctrl *gomock.Controller) *MockIUsecase {
	mock := &MockIUsecase{ctrl: ctrl}
	mock.recorder = &MockIUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsecase) EXPECT() *MockIUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIUsecase) Execute(stamp string, p *dto.Request) (*dto.OutputDefault, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", stamp, p)
	ret0, _ := ret[0].(*dto.OutputDefault)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockIUsecaseMockRecorder) Execute(stamp, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIUsecase)(nil).Execute), stamp, p)
}
