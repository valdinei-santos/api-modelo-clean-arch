// Code generated by MockGen. DO NOT EDIT.
// Source: domain/cliente/get02/usecase/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=domain/cliente/get02/usecase/interfaces.go -destination=domain/cliente/get02/usecase/mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entities "github.com/valdinei-santos/api-modelo-clean-arch/domain/cliente/entities"
	usecase "github.com/valdinei-santos/api-modelo-clean-arch/domain/cliente/get02/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockIUsecase is a mock of IUsecase interface.
type MockIUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseMockRecorder
}

// MockIUsecaseMockRecorder is the mock recorder for MockIUsecase.
type MockIUsecaseMockRecorder struct {
	mock *MockIUsecase
}

// NewMockIUsecase creates a new mock instance.
func NewMockIUsecase(ctrl *gomock.Controller) *MockIUsecase {
	mock := &MockIUsecase{ctrl: ctrl}
	mock.recorder = &MockIUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsecase) EXPECT() *MockIUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIUsecase) Execute(stamp, cpf string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", stamp, cpf)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockIUsecaseMockRecorder) Execute(stamp, cpf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIUsecase)(nil).Execute), stamp, cpf)
}

// MockIPresenter is a mock of IPresenter interface.
type MockIPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockIPresenterMockRecorder
}

// MockIPresenterMockRecorder is the mock recorder for MockIPresenter.
type MockIPresenterMockRecorder struct {
	mock *MockIPresenter
}

// NewMockIPresenter creates a new mock instance.
func NewMockIPresenter(ctrl *gomock.Controller) *MockIPresenter {
	mock := &MockIPresenter{ctrl: ctrl}
	mock.recorder = &MockIPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPresenter) EXPECT() *MockIPresenterMockRecorder {
	return m.recorder
}

// Show mocks base method.
func (m *MockIPresenter) Show(stamp string, t *usecase.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", stamp, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Show indicates an expected call of Show.
func (mr *MockIPresenterMockRecorder) Show(stamp, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockIPresenter)(nil).Show), stamp, t)
}

// ShowError mocks base method.
func (m *MockIPresenter) ShowError(stamp, msgErro string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowError", stamp, msgErro)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShowError indicates an expected call of ShowError.
func (mr *MockIPresenterMockRecorder) ShowError(stamp, msgErro any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowError", reflect.TypeOf((*MockIPresenter)(nil).ShowError), stamp, msgErro)
}

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// QueryLoadDataCliente mocks base method.
func (m *MockIRepository) QueryLoadDataCliente(stamp, cpf string) (*entities.Cliente, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLoadDataCliente", stamp, cpf)
	ret0, _ := ret[0].(*entities.Cliente)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLoadDataCliente indicates an expected call of QueryLoadDataCliente.
func (mr *MockIRepositoryMockRecorder) QueryLoadDataCliente(stamp, cpf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLoadDataCliente", reflect.TypeOf((*MockIRepository)(nil).QueryLoadDataCliente), stamp, cpf)
}

// QueryLoadDataTelefone mocks base method.
func (m *MockIRepository) QueryLoadDataTelefone(stamp, cpf string) ([]entities.Telefone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLoadDataTelefone", stamp, cpf)
	ret0, _ := ret[0].([]entities.Telefone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLoadDataTelefone indicates an expected call of QueryLoadDataTelefone.
func (mr *MockIRepositoryMockRecorder) QueryLoadDataTelefone(stamp, cpf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLoadDataTelefone", reflect.TypeOf((*MockIRepository)(nil).QueryLoadDataTelefone), stamp, cpf)
}
